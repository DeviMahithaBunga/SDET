Oracle :- 


SQL
PL/SQL
SQL*Plus :- it will provide enviornment for the sql and pl/sql.
------------------------
PL / SQL :-  Procedural Language / Structured Query Language'

It is meant for writing programming using sql commands. 

for Any database systems, there exist different types of database objects. 
The Objects are 

Tables
Views
Indexes
Synonyms
-------------------
Cursors
Procedures
Functions
Packages
Triggers
--------------------
STRUCTURE OF PL/SQL:- 

[DECLARE
	VARIABLE DECLARATION SECTION]
BEGIN
	EXECUTION SECTION (INPUT-PROCESS-OUTPUT)
[EXCEPTION
	ERROR HANDLING SECTION]
END;
/

DECLARATION SECTION IS USED TO DECLARE VARIABLES. 
BEGIN SECTION IS ALLOWS TO CODE THE PROGRAM, WITHIN THE BEGIN SECTION,WE CAN ALSO HANDLES EXCEPTIONS
IF REQURIED.
FINALLY PROGRAM ENDS WITH "END" KEYWORD. 

OUTPUT STATEMENT :- 
--------------------
THE FOLLOWING STATEMENT IS USED TO PRINT VARIABLES OR ANY MESSAGES ON SCREEN. 
		DBMS_OUTPUT.PUT_LINE(VARAIBLE/MSG);

BEGIN
	DBMS_OUTPUT.PUT_LINE('HELLO WORLD');
END;
/

---------------------
HOW TO DECLARE VARIABLES

<VARIABLE>  <DATA TYPE> := <INITIAL VALUE>;

:= IS A ASSIGNMENT OPERATOR TO STORE VALUE IN A VARIABLE. 

DECLARE
X INT :=10;
Y FLOAT := 12.45;
BEGIN
DBMS_OUTPUT.PUT_LINE(X);
DBMS_OUTPUT.PUT_LINE(Y);
DBMS_OUTPUT.PUT_LINE(X+Y);
END;
/
--------------
DECLARE
X INT;
Y FLOAT;
BEGIN
X:=100;
Y:=123.56;
DBMS_OUTPUT.PUT_LINE(X);
DBMS_OUTPUT.PUT_LINE(Y);
DBMS_OUTPUT.PUT_LINE(X+Y);
END;
/
-----------------------------------
DECLARE
X INT;
Y FLOAT;
BEGIN
X:=100;
Y:=123.56;
DBMS_OUTPUT.PUT_LINE('X VALUE IS : '||X);
DBMS_OUTPUT.PUT_LINE('Y VALUE IS :' ||Y);
DBMS_OUTPUT.PUT_LINE('ADDITION IS : ' ||(X+Y));
END;
/
--------------------------------
SELECT STATEMENT IN PL/SQL BLOCK
--------------------------------
WHILE USING PL/SQL BLOCK, SELECT STATEMENT CANNOT BE USED AS SAME AS SQL, IT HAS DIFFERENT SYNTAX AS FOLLOWS

SELECT  COL1, COL2, .... INTO VAR1, VAR2, ....  FROM <TABLE NAME>  WHERE <CONDITION>;

WHILE USING ABOVE STATEMENT, IT MUST RETURN ONLY ONE ROW, BASED ON THAT CONDITION HAS TO SPECIFY. 

EXAMPLE 1 :-  RETRIVE EMP NAME, JOB, SALARY WHO ARE HAVING EMPNO 7788 FROM EMP TABLE. 

DECLARE

EMPNAME   VARCHAR(20);
DESIG VARCHAR(10);
SALARY INT;

BEGIN

SELECT ENAME, JOB, SAL INTO EMPNAME, DESIG, SALARY FROM EMP WHERE EMPNO=7788;

DBMS_OUTPUT.PUT_LINE('EMPLOYEE NAME '||EMPNAME);
DBMS_OUTPUT.PUT_LINE('EMPLOYEE JOB '||DESIG);
DBMS_OUTPUT.PUT_LINE('EMPLOYEE SALARY '||SALARY);

END;
/

EXAMPLE 2 :-  CALCULATE ONE YEAR SALARY OF PARTICULAR EMPLOYEE. 

DECLARE

EMPNAME   VARCHAR(20);
DESIG VARCHAR(10);
SALARY INT;
YEARLYSAL INT;

BEGIN

SELECT ENAME, JOB, SAL INTO EMPNAME, DESIG, SALARY FROM EMP WHERE EMPNO=7788;

DBMS_OUTPUT.PUT_LINE('EMPLOYEE NAME : '||EMPNAME);
DBMS_OUTPUT.PUT_LINE('EMPLOYEE JOB : '||DESIG);
DBMS_OUTPUT.PUT_LINE('EMPLOYEE SALARY : '||SALARY);
YEARLYSAL:=SALARY*12;
DBMS_OUTPUT.PUT_LINE('YEARLY SALARY : '||YEARLYSAL);

END;
/
---------------------------------------
%TYPE :-  IT IS ONE OF THE TYPE OF PL/SQL WHICH ALLOWS TO DELCARE VARIABLES BASED ON COLUMN TYPE IN TABLE. 

VARIABLE  TABLENAME.COLNAME%TYPE;

EXAMPLE 
-------
DECLARE

EMPNAME   EMP.ENAME%TYPE;
DESIG 	  EMP.JOB%TYPE;
SALARY    EMP.SAL%TYPE;

BEGIN

SELECT ENAME, JOB, SAL INTO EMPNAME, DESIG, SALARY FROM EMP WHERE EMPNO=7788;

DBMS_OUTPUT.PUT_LINE('EMPLOYEE NAME '||EMPNAME);
DBMS_OUTPUT.PUT_LINE('EMPLOYEE JOB '||DESIG);
DBMS_OUTPUT.PUT_LINE('EMPLOYEE SALARY '||SALARY);

END;
/

%ROWTYPE:-  IT IS ONE OF THE TYPE OF PL/SQL WHERE IT ALLOWS TO STORE COMPLTE ROW OF TABLE. 

<VARIABLE>  TABLENAME%ROWTYPE;

ONCE ROW TYPE VARIABLE STORES DATA, TO ACCESS THAT DATA, WE HAVE TO USE AS FOLLOWS

	ROWTYPEVARIABLE.COLNAME

EXAMPLE 
-------
DECLARE

E EMP%ROWTYPE;

BEGIN

SELECT * INTO E FROM EMP WHERE EMPNO = 7788;

DBMS_OUTPUT.PUT_LINE('EMPLOYEE NAME '||E.ENAME);
DBMS_OUTPUT.PUT_LINE('EMPLOYEE JOB '||E.JOB);
DBMS_OUTPUT.PUT_LINE('EMPLOYEE SALARY '||E.SAL);

END;
/